/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : OneWireWait.h
**     Project     : Lab4
**     Processor   : MK64FN1M0VLL12
**     Component   : Wait
**     Version     : Component 01.067, Driver 01.00, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2015-02-08, 10:01, # CodeGen: 21
**     Abstract    :
**          Implements busy waiting routines.
**     Settings    :
**          Component name                                 : OneWireWait
**          Manual Clock Values                            : Disabled
**          Delay100usFunction                             : Delay100US
**          RTOS                                           : Disabled
**          Watchdog                                       : Disabled
**     Contents    :
**         Wait10Cycles   - void OneWireWait_Wait10Cycles(void);
**         Wait100Cycles  - void OneWireWait_Wait100Cycles(void);
**         WaitCycles     - void OneWireWait_WaitCycles(uint16_t cycles);
**         WaitLongCycles - void OneWireWait_WaitLongCycles(uint32_t cycles);
**         Waitms         - void OneWireWait_Waitms(uint16_t ms);
**         Waitus         - void OneWireWait_Waitus(uint16_t us);
**         Waitns         - void OneWireWait_Waitns(uint16_t ns);
**         WaitOSms       - void OneWireWait_WaitOSms(void);
**
**     License   : Open Source (LGPL)
**     Copyright : Erich Styger, 2013-2014, all rights reserved.
**     Web       : www.mcuoneclipse.com
**     This an open source software implementing waiting routines using Processor Expert.
**     This is a free software and is opened for education,  research  and commercial developments under license policy of following terms:
**     * This is a free software and there is NO WARRANTY.
**     * No restriction on use. You can use, modify and redistribute it for personal, non-profit or commercial product UNDER YOUR RESPONSIBILITY.
**     * Redistributions of source code must retain the above copyright notice.
** ###################################################################*/
/*!
** @file OneWireWait.h
** @version 01.00
** @brief
**          Implements busy waiting routines.
*/         
/*!
**  @addtogroup OneWireWait_module OneWireWait module documentation
**  @{
*/         

#ifndef __OneWireWait_H
#define __OneWireWait_H

/* MODULE OneWireWait. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */

#include "Cpu.h"

#ifdef __cplusplus
extern "C" {
#endif


#define OneWireWait_NofCyclesMs(ms, hz)  ((ms)*((hz)/1000)) /* calculates the needed cycles based on bus clock frequency */
#define OneWireWait_NofCyclesUs(us, hz)  ((us)*(((hz)/1000)/1000)) /* calculates the needed cycles based on bus clock frequency */
#define OneWireWait_NofCyclesNs(ns, hz)  (((ns)*(((hz)/1000)/1000))/1000) /* calculates the needed cycles based on bus clock frequency */


#define OneWireWait_WAIT_C(cycles) \
     ( (cycles)<=10 ? \
          OneWireWait_Wait10Cycles() \
        : OneWireWait_WaitCycles((uint16_t)cycles) \
      )                                      /*!< wait for some cycles */


void OneWireWait_Wait10Cycles(void);
/*
** ===================================================================
**     Method      :  OneWireWait_Wait10Cycles (component Wait)
**     Description :
**         Wait for 10 CPU cycles.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void OneWireWait_Wait100Cycles(void);
/*
** ===================================================================
**     Method      :  OneWireWait_Wait100Cycles (component Wait)
**     Description :
**         Wait for 100 CPU cycles.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void OneWireWait_WaitCycles(uint16_t cycles);
/*
** ===================================================================
**     Method      :  OneWireWait_WaitCycles (component Wait)
**     Description :
**         Wait for a specified number of CPU cycles (16bit data type).
**     Parameters  :
**         NAME            - DESCRIPTION
**         cycles          - The number of cycles to wait.
**     Returns     : Nothing
** ===================================================================
*/

void OneWireWait_Waitms(uint16_t ms);
/*
** ===================================================================
**     Method      :  OneWireWait_Waitms (component Wait)
**     Description :
**         Wait for a specified time in milliseconds.
**     Parameters  :
**         NAME            - DESCRIPTION
**         ms              - How many milliseconds the function has to
**                           wait
**     Returns     : Nothing
** ===================================================================
*/

/* we are having a static clock configuration: implement as macro/inlined version */
#define OneWireWait_Waitus(us)  \
       (  ((OneWireWait_NofCyclesUs((us),CPU_BUS_CLK_HZ)==0)||(us)==0) ? \
          (void)0 : \
          ( ((us)/1000)==0 ? (void)0 : OneWireWait_Waitms((uint16_t)((us)/1000))) \
          , (OneWireWait_NofCyclesUs(((us)%1000), CPU_BUS_CLK_HZ)==0) ? (void)0 : \
            OneWireWait_WAIT_C(OneWireWait_NofCyclesUs(((us)%1000), CPU_BUS_CLK_HZ)) \
       )
/*
** ===================================================================
**     Method      :  OneWireWait_Waitus (component Wait)
**     Description :
**         Wait for a specified time in microseconds.
**     Parameters  :
**         NAME            - DESCRIPTION
**         us              - How many microseconds the function has to
**                           wait
**     Returns     : Nothing
** ===================================================================
*/

/* we are having a static clock configuration: implement as macro/inlined version */
#define OneWireWait_Waitns(ns)  \
       (  ((OneWireWait_NofCyclesNs((ns), CPU_BUS_CLK_HZ)==0)||(ns)==0) ? \
          (void)0 : \
          OneWireWait_Waitus((ns)/1000) \
          , (OneWireWait_NofCyclesNs((ns)%1000, CPU_BUS_CLK_HZ)==0) ? \
              (void)0 : \
              OneWireWait_WAIT_C(OneWireWait_NofCyclesNs(((ns)%1000), CPU_BUS_CLK_HZ)) \
       )
/*
** ===================================================================
**     Method      :  OneWireWait_Waitns (component Wait)
**     Description :
**         Wait for a specified time in nano seconds.
**     Parameters  :
**         NAME            - DESCRIPTION
**         ns              - How many ns the function has to wait
**     Returns     : Nothing
** ===================================================================
*/

#define OneWireWait_WaitOSms(ms) \
  OneWireWait_Waitms(ms) /* no RTOS used, so use normal wait */
/*
** ===================================================================
**     Method      :  OneWireWait_WaitOSms (component Wait)
**     Description :
**         If an RTOS is enabled, this routine will use a non-blocking
**         wait method. Otherwise it will do a busy/blocking wait.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

#ifdef __cplusplus
}  /* extern "C" */
#endif

void OneWireWait_WaitLongCycles(uint32_t cycles);
/*
** ===================================================================
**     Method      :  OneWireWait_WaitLongCycles (component Wait)
**     Description :
**         Wait for a specified number of CPU cycles (32bit data type).
**     Parameters  :
**         NAME            - DESCRIPTION
**         cycles          - The number of cycles to wait.
**     Returns     : Nothing
** ===================================================================
*/

/* END OneWireWait. */

#endif
/* ifndef __OneWireWait_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.4 [05.11]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
